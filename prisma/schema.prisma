// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  birthday      DateTime?
  bio           String?
  pronouns      String?
  location      String?
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  comments      Comment[]
  likes         CommentLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Review {
  id        String    @id @default(cuid())
  userId    String
  title     String
  body      String    @db.Text
  rating    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId   String
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  message   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // New fields for nested comments
  parentId String?
  parent   Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[]     @relation("CommentReplies")
  likes    CommentLike[]
}

model CommentLike {
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}
